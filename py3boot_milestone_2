import random
from IPython.display import clear_output


suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}

playing = True

class Hand():
    def __init__(self, cards_in_hand):
        self.cards_in_hand = cards_in_hand
        
class Card():
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
        #self.card = {'suit':self.suit, 'rank':self.rank}
        
    
    def __str__(self):
        return(self.rank + ' of ' + self.suit)
        
class Deck:
    
    def __init__(self):
        global suits
        global ranks
        
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                card = Card(suit, rank)
                self.deck.append(card)
    
    def __str__(self):
        return('Deck with '+ str(len(self.deck)) + ' cards')

    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        deal_card = self.deck.pop()
        return(deal_card)
        
class Hand:
    
    global values
    
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0   # start with zero value
        self.aces = 0    # add an attribute to keep track of aces
    
    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank] 
        if card.rank == 'Ace':
            self.aces += 1
        print('Add ' + str(card))
    
    def adjust_for_ace(self):
        while self.value > 21 and self.aces > 0:
            self.value -= 10
            self.aces -= 1

class Chips:
    
    def __init__(self, total):
        self.total = total  # This can be set to a default value or supplied by a user input
        #self.bet = 0
        
    def bet(self, amount):
        self.bet = amount
        
    def win_bet(self, amount):
        self.total += amount
    
    def lose_bet(self, amount):
        self.total -= amount
        
def take_bet():
    while True:
        try:
            bet_amount = int(input('Please give me a bet: '))
        except:
            print('Not number')
            continue
        else:
            print('You bet ${}'.format(bet_amount))
            return(bet_amount)
            break
        
def hit(deck,hand):
    card_dealed = deck.deal()
    hand.add_card(card_dealed)
    hand.adjust_for_ace()
    
def hit_or_stand(deck,hand):
    global playing  # to control an upcoming while loop
    decision_made = False
    while not decision_made:
        decision = input('Hit(h) or Stand(s)?: ')
        if decision == 'h':
            print('hit')
            decision_made = True
            hit(deck,hand)
        if decision == 's':
            print('stand')
            decision_made = True
            playing = False
        
def show_some(player,dealer):
    global values
    print('\nPlayer Cards:')
    print('\n'.join([str(card) for card in player.cards]))
    print('\nTotal Player Score: ', player.value)
    print('\nDealer First Card: ')
    print('\n'.join([str(card) for card in dealer.cards[0:1]]))
    
    
def show_all(player,dealer):
    global values
    
    print('\nPlayer Cards:')
    print('\n'.join([str(card) for card in player.cards]))
    print('\nTotal Player Score: ', player.value)
    print('\nDealer Cards: ')
    print('\n'.join([str(card) for card in dealer.cards]))
    print('\nTotal Dealer Score: ', dealer.value)
    pass        

def game_state():
    global player
    global dealer
    global playing
    if player.value > 21:
        return('player busts')
    if 21 >= player.value > dealer.value and dealer.value >= 17 and not playing:
        return('player wins')
    if 21 >= player.value == dealer.value and dealer.value >= 17 and not playing:
        return('draw')
    if 21 >= dealer.value == player.value and dealer.value >= 17 and not playing:
        return('dealer wins')
    if dealer.value > 21:
        return('dealer busts')
    
def ask(ask_text, wrong_text):
    while True:
        try:
            num = int(input(ask_text))
        except:
            print(wrong_text)
            continue
        else:
            print(num)
            return(num)
            break
        
print('WELCOME TO GRAND TOURNAMENT OF BLACK JACK!!!')
while True:
    # Print an opening statement
    print('Game started.')
    # Create & shuffle the deck, deal two cards to each player
    
    deck = Deck()
    deck.shuffle()
    
    player = Hand()
    dealer = Hand()
    
    print('\n2 cards for player')
    hit(deck,player)
    hit(deck,player)
    print('\n2 cards for dealer')
    hit(deck,dealer)
    hit(deck,dealer)
    
    # Set up the Player's chips
    chip_amount = ask('Please deposit chip amount: ', 'Invalid amount!')
    chip = Chips(chip_amount)
    
    # Prompt the Player for their bet
    bet_amount = take_bet()
    #clear_output()
    
    # Show cards (but keep one dealer card hidden)
    show_some(player, dealer)
    
    playing = True
    while playing:  # recall this variable from our hit_or_stand function
        
        # Prompt for Player to Hit or Stand
        hit_or_stand(deck, player)
        #clear_output()
        # Show cards (but keep one dealer card hidden)
        show_some(player, dealer)
        
        # If player's hand exceeds 21, run player_busts() and break out of loop
        if game_state() == 'player busts':
            playing = False
            chip.lose_bet(bet_amount)
            print('Player busts!')
            break
        else:
            continue

    # If Player hasn't busted, play Dealer's hand until Dealer reaches 17
    while dealer.value < 17:
        hit(deck, dealer)
        # Show all cards
        show_all(player, dealer)
        # Run different winning scenarios
        if game_state() == 'player wins':
            playing = False
            chip.win_bet(bet_amount)
            print('Player wins!')
            break
        
        if game_state() == 'draw':
            playing = False
            print('Draw game')
            break
        
        if game_state() == 'dealer wins':
            playing = False
            chip.lose_bet(bet_amount)
            print('Dealer wins!')
            break
            
        if game_state() == 'dealer busts':
            playing = False
            chip.win_bet(bet_amount)
            print('Dealer busts!')
            break
    
    # Inform Player of their chips total 
    print('Your chip balance is now ${}'.format(chip.total))
    # Ask to play again
    keep_play = True
    while keep_play:
        play_response = input('Do you want to keep playing? Yes(y) or No(n): ')
        if play_response == 'y':
            continue
            print('Game restarting.')
        else:
            print('Thank you for having fun')
            break
